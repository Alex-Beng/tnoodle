<project name="tnt" default="dist" basedir="." xmlns:jsl="antlib:com.googlecode.jslint4java">
	<description>
		Builds a special copy of ScrambleServer with tnt embedded,
		and a copy of tnt built upon an applet.
	</description>
	
	<property name="NAME" value="TNTServer" />
	<property name="VERSION" value="0.1.2" />
	
	<property name="src" location="src" />
	<property name="lib" location="../lib" />
	<property name="bin" location="bin" />
	<property name="tnt_bin" location="bin/tnt" />
	<property name="dist" location="dist" />
	<property name="scrambles" location="../scrambles" />
	
	<!-- TODO - it would be nice to read this value from the build.xml in scrambles -->
	<property name="scrambleserver-jar" location="${scrambles}/dist/ScrambleServer-0.1.1.jar" />
	<property name="tntserver-jar" location="${dist}/${NAME}-${VERSION}.jar" />
	
	<property name="js_src" location="${src}/js/" />
	<property name="js_bin" location="${tnt_bin}/js/" />
	<property name="js_globbed_rel" value="js/tnt.js" />
	<property name="js_globbed" location="${tnt_bin}/${js_globbed_rel}" />
	
	<property name="css_src" location="${src}/css/" />
	<property name="css_bin" location="${tnt_bin}/css/" />
	<property name="css_globbed_rel" value="css/tnt.css" />
	<property name="css_globbed" location="${tnt_bin}/${css_globbed_rel}" />
	
	<condition property="isWin">
		<os family="windows" />
	</condition>

	<!-- setting up jslint -->
	<path id="ant.tasks.classpath">
		<fileset dir="${lib}" includes="*.jar" />
	</path>
	<taskdef uri="antlib:com.googlecode.jslint4java"
		resource="com/googlecode/jslint4java/antlib.xml"
		classpathref="ant.tasks.classpath" />
	
	<!-- setting up yuicompressor -->
	<property 
	    name="yui-compressor.jar" 
	    location="${lib}/yuicompressor-2.4.2.jar" />
	<property 
	    name="yui-compressor-ant-task.jar" 
	    location="${lib}/yui-compressor-ant-task-0.5.jar" />
	<path id="task.classpath">
	  <pathelement location="${yui-compressor.jar}" />
	  <pathelement location="${yui-compressor-ant-task.jar}" />
	</path>
	<taskdef
	    name="yui-compressor" 
	    classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
	  <classpath refid="task.classpath" />
	</taskdef>
	
	<target name="init">
		<tstamp />
		<mkdir dir="${dist}" />
		<mkdir dir="${bin}" />
	</target>

	<target name="concat" depends="clean,init" description="compile the source">
		<mkdir dir="${css_bin}" />
		<mkdir dir="${js_bin}" />
		<copy tofile="${tnt_bin}/index.html" file="${src}/index.html" />
		<script language="javascript">
		<![CDATA[
			function append(printWriter, fileName) {
				var reader = new java.io.BufferedReader(new java.io.FileReader(fileName));
				var line;
				while((line = reader.readLine()) != null) {
					printWriter.println(line);
				}
				reader.close();
			}
			
			var cssRegex = /^<link type="text\/css" rel="stylesheet" href="(.*)" media="screen" \/>$/;
			var cssOut = new java.io.PrintWriter(new java.io.File(css_globbed));
			var foundCss = false;
			
			var jsRegex = /^<script type="text\/javascript" src="(.*)"><\/script>$/;
			var jsOut = new java.io.PrintWriter(new java.io.File(js_globbed));
			var foundJs = false;

			//var newIndex = java.io.File.createTempFile('newIndex', 'html');
			var newIndex = new java.io.File(tnt_bin + "/newindex.html");
			var out = new java.io.PrintWriter(newIndex);
			var oldIndex = new java.io.File(tnt_bin + "/index.html");
			var reader = new java.io.BufferedReader(new java.io.FileReader(oldIndex));

			var line = reader.readLine();
			while(line != null) {
				var match = cssRegex.exec(line);
				if(match) {
					// found some css! add it to our globbed file
					append(cssOut, src + "/" + match[1]);
					if(!foundCss) {
						foundCss = true;
						out.println('<link type="text\/css" rel="stylesheet" href="' + css_globbed_rel + '" media="screen" \/>');
					}
				} else {
					match = jsRegex.exec(line);
					if(match) {
						if(!foundJs) {
							foundJs = true;
							out.println('<script type="text\/javascript" src="' + js_globbed_rel + '"><\/script>');
						}
						// found some js! add it to our globbed file
						append(jsOut, src + "/" + match[1]);
					} else {
						out.println(line);
					}
				}
				line = reader.readLine();
			}
			reader.close();
			out.close();
			cssOut.close();
			jsOut.close();
			oldIndex['delete'](); //lol @ javascript, can't do oldIndex.delete(), because delete is a keyword
			newIndex.renameTo(oldIndex);
]]>
		</script>

		<copy todir="${tnt_bin}/media">
			<fileset dir="${src}/media" />
		</copy>

		<echo>Globbed all the js files together.</echo>
	</target>
	
	<target name="jslint">
		<jsl:jslint options="browser,evil">
		    <formatter type="plain" />
		    <fileset dir="${js_src}" includes="*.js" excludes="*mootools*"/>
		</jsl:jslint>
		<echo>Successfully jslinted, good job!</echo>
	</target>
	
	<target name="minify">
		<yui-compressor 
		    warn="false" 
		    munge="true" 
		    preserveallsemicolons="false"
		    fromdir="${tnt_bin}" 
		    todir="${tnt_bin}"
			jsSuffix=".js.min" cssSuffix=".css.min">
		  <include name="**/*.js" />
		  <include name="**/*.css" />
		</yui-compressor>
		<move file="${js_globbed}.min" tofile="${js_globbed}" />
		<move file="${css_globbed}.min" tofile="${css_globbed}" />
	</target>
	
	<target name="scrambles">
		<ant antfile="${scrambles}/build.xml" inheritAll="false" />
	</target>
	
	<target name="tntserver" depends="scrambles">
		<copy file="${scrambleserver-jar}" tofile="${tntserver-jar}" />
		<jar file="${tntserver-jar}" update="true">
			<fileset dir="${bin}" />
			<manifest>
				<attribute name="Implementation-Title" value="${NAME}"/>
				<attribute name="Implementation-Version" value="${VERSION}"/>
			</manifest>
		</jar>
	</target>
	
	<target name="tntapplet" depends="scrambles">
		<!-- TODO: actually DO this! -->
	</target>
	
	<target name="dist" depends="jslint,concat,minify,tntserver,tntapplet" description="generate the distribution">
		<echo>Successfully built TNTServer!</echo>
	</target>
	
	<target name="nomin" depends="jslint,concat,tntserver,tntapplet" description="generate the distribution">
		<echo>Successfully built TNTServer without minifying!</echo>
	</target>
	
	<target name="symlinkWin" if="isWin">
		<exec executable="${lib}/mklink.bat">
			<arg value="/D" />
			<arg value="${scrambles}\bin\tnt" />
			<arg value="${src}" />
		</exec>
	</target>
	
	<target name="symlinkUnix" unless="isWin">
		<symlink link="${scrambles}/bin/tnt" resource="${src}"></symlink>
	</target>
	
	<target name="run" depends="" description="">
		<ant antfile="${scrambles}/build.xml" inheritAll="false" target="clean" />
		<ant antfile="${scrambles}/build.xml" inheritAll="false" target="compile" />
		
		<!-- 
			Setting up a symlink to the tnt source code from the server
			means we won't have to compile tnt to see the changes reflected
			on the server. This makes development significantly easier and faster.
			mklink is used on windows, ln -s is for linux.
			TODO - test that this actually works on linux/mac!
		-->
		<antcall target="symlinkWin" />
		<antcall target="symlinkUnix" />
		
		<ant antfile="${scrambles}/build.xml" inheritAll="false" target="run" />
	</target>
	
	<target name="clean" description="clean up">
		<delete dir="${bin}" />
		<delete dir="${dist}" />
	</target>
</project>
