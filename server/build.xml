<project name="tnoodleserver" default="dist" basedir=".">
	<description>
		TODO
	</description>

	<property name="src" location="src" />
	<property name="bin" location="bin" />
	<property name="dist" location="dist" />

	<property name="proj" location="." />
	<property name="name" value="${ant.project.name}" />
	<property name="main" value="net.gnehzr.tnoodle.server.TNoodleServer" />
	<!-- We do our development on port 8080 so we don't have to run ant with
		 root privileges on linux -->
	<property name="argv" value="-n -p 8080" />
	<propertyset id="tnoodle">
		<propertyref name="proj" />
		<propertyref name="name" />
		<propertyref name="main" />
		<propertyref name="argv" />
	</propertyset>

	<property name="plugin-list" location="${bin}/scramblers/plugins.txt" />
	<property name="timer" location="../timer" />
	<property name="www-src" location="${src}/www" />
	<property name="www-bin" location="${bin}/www" />
	<property name="favicon-src" location="${src}/favicon.ico" />
	<property name="favicon-bin" location="${bin}/favicon.ico" />

	<target name="compile">
		<ant antfile="../build.xml" target="compile" inheritAll="false">
			<propertyset refid="tnoodle" />
		</ant>

		<!-- copying root www directory -->
		<copy todir="${www-bin}">
			<fileset dir="${www-src}" includes="**" />
		</copy>
	</target>
	
	<target name="run" description="runs the server without compiling the jar file first">
		<mkdir dir="${www-bin}" /> <!-- nasty hack to deal with nonexistent www directory -->
		<antcall target="link-tnt" />
		<ant antfile="../build.xml" target="run" inheritAll="false">
			<propertyset refid="tnoodle" />
		</ant>
	</target>

	<target name="dist" depends="copy-tnt">
		<ant antfile="../build.xml" target="dist" inheritAll="false">
			<propertyset refid="tnoodle" />
		</ant>
	</target>

	<condition property="is-win">
		<os family="windows" />
	</condition>

	<!-- TODO create a mklink/rmlink ant task -->
	<target name="link-tnt-win" if="is-win">
		<exec executable="${tools}/mklink.bat">
			<arg value="/D" />
			<arg value="${bin}\www\tnt" />
			<arg value="${timer}/src" />
		</exec>
	</target>
	<target name="link-tnt-unix" unless="is-win">
		<symlink link="${bin}/www/tnt" resource="${timer}/src"></symlink>
	</target>
	
	<target name="unlink-tnt-unix" unless="is-win">
		<exec executable="rm">
			<arg value="-r" />
			<arg value="${www-bin}/tnt" />
		</exec>
	</target>
	<target name="unlink-tnt-win" if="is-win">
		<exec executable="${tools}/rmdir.bat">
			<arg value="/S" />
			<arg value="/Q" />
			<arg value="${www-bin}/tnt" />
		</exec>
	</target>

	<!--
		For the life of me, I can't get ant to stop
		following symlinks. Since tnt symlinks to its
		source in the ${bin} folder, the ant delete
		task effectively deletes the tnt src code, which is bad.
		Hopefully either rm (linux) or rmdir (windows) will work
		for us.
	<delete dir="${bin}" followsymlinks="false" />
	-->
	<target name="unlink-tnt" depends="unlink-tnt-unix,unlink-tnt-win" />

	<!-- 
		Setting up a symlink to the tnt source code from the server
		means that changes to tnt will be reflected on a running server.
		This makes development significantly easier and faster.
		mklink is used on windows, ln -s is for linux.
	-->
	<target name="link-tnt" depends="unlink-tnt,link-tnt-unix,link-tnt-win" />

	<target name="copy-tnt" depends="unlink-tnt">
		<!-- We only compile tnt when distributing the server because we don't want it to
			 get compiled when doing a "run". If we're doing a "run" with compiled code,
			 it's very hard to debug. -->
		<ant antfile="${timer}/build.xml" inheritAll="false" target="compile" />
		<copy todir="${bin}/www">
			<fileset dir="${timer}/bin/" includes="**" />
		</copy>
	</target>

	<target name="clean" depends="unlink-tnt">
		<!-- Note: unlink-tnt MUST occur before deleting ${bin}! -->
		<delete dir="${bin}" />
		<delete dir="${dist}" />
	</target>
</project>
