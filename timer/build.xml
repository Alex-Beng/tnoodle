<project name="tnoodletimer" default="compile" basedir="." xmlns:jsl="antlib:com.googlecode.jslint4java">
	<description>
		TODO
	</description>
	
	<property file="../VERSION" />
	<fail message="Must define VERSION property in file ../VERSION (in the form VERSION=somestring)" unless="VERSION" />

	<property name="src" location="src" />
	<property name="lib" location="../lib" />
	<property name="bin" location="bin" />
	<property name="tnt_bin" location="bin/tnt" />
	<property name="scrambles" location="../scrambles" />

	<property name="js_src" location="${src}/js/" />
	<property name="js_bin" location="${tnt_bin}/js/" />
	<property name="js_globbed_rel" value="js/tnt.js" />
	<property name="js_globbed" location="${tnt_bin}/${js_globbed_rel}" />
	
	<property name="css_src" location="${src}/css/" />
	<property name="css_bin" location="${tnt_bin}/css/" />
	<property name="css_globbed_rel" value="css/tnt.css" />
	<property name="css_globbed" location="${tnt_bin}/${css_globbed_rel}" />

	<taskdef uri="antlib:com.googlecode.jslint4java" resource="com/googlecode/jslint4java/antlib.xml" classpath="${lib}/jslint4java-1.4.6.jar" />
	<taskdef name="yui-compressor" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask" classpath="${lib}/yui-compressor-ant-task-0.5.2.jar;${lib}/yuicompressor-2.4.2.jar" />
	
	<target name="init">
		<tstamp />
		<mkdir dir="${bin}" />
	</target>

	<target name="concat" depends="clean,init">
		<mkdir dir="${css_bin}" />
		<mkdir dir="${js_bin}" />
		<copy tofile="${tnt_bin}/index.html" file="${src}/index.html" />
		<script language="javascript">
		<![CDATA[
			function append(printWriter, fileName) {
				var reader = new java.io.BufferedReader(new java.io.FileReader(fileName));
				var line;
				while((line = reader.readLine()) != null) {
					// This might be a pretty heavy hammer, but who in the world
					// would legitimately want to use the string "%%VERSION%%"?
					// Famous last words?
					line = line.replaceAll("%%VERSION%%", VERSION);
					printWriter.println(line);
				}
				reader.close();
			}
			
			var cssRegex = /^<link type="text\/css" rel="stylesheet" href="(.*)" media="screen" \/>$/;
			var cssOut = new java.io.PrintWriter(new java.io.File(css_globbed));
			var foundCss = false;
			
			var jsRegex = /^<script type="text\/javascript" src="(.*)"><\/script>$/;
			var jsOut = new java.io.PrintWriter(new java.io.File(js_globbed));
			var foundJs = false;

			//var newIndex = java.io.File.createTempFile('newIndex', 'html');
			var newIndex = new java.io.File(tnt_bin + "/newindex.html");
			var out = new java.io.PrintWriter(newIndex);
			var oldIndex = new java.io.File(tnt_bin + "/index.html");
			var reader = new java.io.BufferedReader(new java.io.FileReader(oldIndex));

			var jsCount = 0;
			var cssCount = 0;
			var line = reader.readLine();
			while(line != null) {
				var match = cssRegex.exec(line);
				if(match) {
					// found some css! add it to our globbed file
					append(cssOut, src + "/" + match[1]);
					if(!foundCss) {
						cssCount++;
						foundCss = true;
						out.println('<link type="text\/css" rel="stylesheet" href="' + css_globbed_rel + '" media="screen" \/>');
					}
				} else {
					match = jsRegex.exec(line);
					if(match) {
						jsCount++;
						if(!foundJs) {
							foundJs = true;
							out.println('<script type="text\/javascript" src="' + js_globbed_rel + '"><\/script>');
						}
						// found some js! add it to our globbed file
						append(jsOut, src + "/" + match[1]);
					} else {
						out.println(line);
					}
				}
				line = reader.readLine();
			}
			reader.close();
			out.close();
			cssOut.close();
			jsOut.close();
			oldIndex['delete'](); //lol @ javascript, can't do oldIndex.delete(), because delete is a keyword
			newIndex.renameTo(oldIndex);

			java.lang.System.out.println("Globbed " + jsCount + " js files to " + css_globbed);
			java.lang.System.out.println("Globbed " + cssCount + " css files to " + js_globbed);
]]>
		</script>

		<copy todir="${tnt_bin}/media">
			<fileset dir="${src}/media" />
		</copy>

	</target>
	
	<target name="jslint">
		<jsl:jslint options="browser,evil">
		    <formatter type="plain" />
		    <fileset dir="${js_src}" includes="*.js" excludes="*mootools*"/>
		</jsl:jslint>
		<echo>Successfully jslinted, good job!</echo>
	</target>
	
	<target name="minify">
		<yui-compressor 
		    warn="false" 
		    munge="true" 
		    preserveallsemicolons="false"
		    fromdir="${tnt_bin}" 
		    todir="${tnt_bin}"
			jsSuffix=".js.min"
			cssSuffix=".css.min">
			<include name="${js_globbed_rel}" />
			<include name="${css_globbed_rel}" />
		</yui-compressor>
		<move file="${js_globbed}.min" tofile="${js_globbed}" />
		<move file="${css_globbed}.min" tofile="${css_globbed}" />
	</target>
	
	<target name="scrambles">
		<ant antfile="${scrambles}/build.xml" inheritAll="false" />
	</target>
	
	<target name="compile" depends="jslint,concat,minify">
		<echo>Successfully built ${ant.project.name}!</echo>
	</target>
	
	<target name="compile-nomin" depends="jslint,concat">
		<echo>Successfully built ${ant.project.name} without minifying!</echo>
	</target>
	
	<target name="clean">
		<delete dir="${bin}" />
	</target>
</project>
